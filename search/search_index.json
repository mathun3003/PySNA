{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PySNA Documentation Contents for users: Installation Quick Start Overview TwitterAPI Utility Functions CLI Tool Contents for maintainers: Implementation Details TwitterDataFetcher TwitterDataProcessor BaseDataProcessor Software Tests Links: Tweepy Docs Twitter API Docs","title":"Home"},{"location":"#pysna-documentation","text":"Contents for users: Installation Quick Start Overview TwitterAPI Utility Functions CLI Tool Contents for maintainers: Implementation Details TwitterDataFetcher TwitterDataProcessor BaseDataProcessor Software Tests Links: Tweepy Docs Twitter API Docs","title":"PySNA Documentation"},{"location":"maintenance/BaseDataProcessor/","text":"Coming soon...","title":"BaseDataProcessor"},{"location":"maintenance/TwitterDataFetcher/","text":"Coming soon...","title":"TwitterDataFetcher"},{"location":"maintenance/TwitterDataProcessor/","text":"Coming soon...","title":"TwitterDataProcessor"},{"location":"maintenance/implementation-details/","text":"Coming soon...","title":"Implementation details"},{"location":"maintenance/testing/","text":"Coming soon...","title":"Software Testing"},{"location":"user-guide/installation/","text":"Installation The easiest way to install the latest version from PyPI is by using pip : pip install pysna You can also use Git to clone the repository from GitHub to install the latest development version: git clone https://github.com/mathun3003/PySNA.git cd PySNA pip install . Alternatively, install directly from the GitHub repository: pip install git+https://github.com/mathun3003/PySNA.git","title":"Installation"},{"location":"user-guide/installation/#installation","text":"The easiest way to install the latest version from PyPI is by using pip : pip install pysna You can also use Git to clone the repository from GitHub to install the latest development version: git clone https://github.com/mathun3003/PySNA.git cd PySNA pip install . Alternatively, install directly from the GitHub repository: pip install git+https://github.com/mathun3003/PySNA.git","title":"Installation"},{"location":"user-guide/overview/","text":"Available content: TwitterAPI Utility Functions CLI Tool","title":"Overview"},{"location":"user-guide/quick-start/","text":"Quick Start Import the API class for the Twitter API by writing: from pysna import TwitterAPI or import utility functions, too, by writing: from pysna import * Then, create an API instance by running: api = TwitterAPI(\"BEARER_TOKEN\", \"CONSUMER_KEY\", \"CONSUMER_SECRET\", \"ACCESS_TOKEN\", \"ACCESS_TOKEN_SECRET\") and invoke a function: api.user_info(...) Find usage and output examples in the examples folder .","title":"Quick Start"},{"location":"user-guide/quick-start/#quick-start","text":"Import the API class for the Twitter API by writing: from pysna import TwitterAPI or import utility functions, too, by writing: from pysna import * Then, create an API instance by running: api = TwitterAPI(\"BEARER_TOKEN\", \"CONSUMER_KEY\", \"CONSUMER_SECRET\", \"ACCESS_TOKEN\", \"ACCESS_TOKEN_SECRET\") and invoke a function: api.user_info(...) Find usage and output examples in the examples folder .","title":"Quick Start"},{"location":"user-guide/overview/TwitterAPI/","text":"TwitterAPI This class provides a Twitter API interface in order to interact with the Twitter Search API v2. It is built on top of the tweepy.Client class. Thus, it supports all methods from the Tweepy client. Additional functions are added. The following functions are available: user_info compare_users tweet_info compare_tweets Initialization Header: TwitterAPI(bearer_token: Optional[Any] = None, consumer_key: Optional[Any] = None, consumer_secret: Optional[Any] = None, access_token: Optional[Any] = None, access_token_secret: Optional[Any] = None, x_rapidapi_key: Optional[Any] = None, x_rapidapi_host: Optional[Any] = None, wait_on_rate_limit: bool = True) Args: bearer_token : Twitter API OAuth 2.0 Bearer Token consumer_key : Twitter API OAuth 1.0a Consumer Key consumer_secret : Twitter API OAuth 1.0a Consumer Secret access_token : Twitter API OAuth 1.0a Access Token access_token_secret : Twitter API OAuth 1.0a Access Token Secret x_rapidapi_key : Access Token for the Botometer API from the RapidAPI platform x_rapidapi_host : Host for the Botometer API from the RapidAPI platform wait_on_rate_limit : Whether to wait when rate limit is reached. Defaults to True. user_info Function: TwitterAPI.user_info(user: str | int, attributes: List[LITERALS_USER_INFO] | str, return_timestamp: bool = False) Receive requested user information from Twitter User Object. For one attribute, only the corresponding value is returned. For multiple attributes, a dictionary with the key-value pairs of the requested attributes is returned. Args: user (str | int): Twitter User either specified by corresponding ID or screen name. attributes (List[LITERALS_USER_INFO] | str): Attributes of the User object. These must be from this list: Detailed description of user information attributes . See the link for detailed description of the attributes. return_timestamp (bool): Add UTC Timestamp of the request to results. Defaults to False. References: https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup https://developer.twitter.com/en/docs/twitter-api/v1/data-dictionary/object-model/user Example: # request user information from the University of M\u00fcnster results = api.user_info(\"WWU_Muenster\", [\"id\", \"created_at\", \"last_active\", \"followers_count\"]) print(results) will print: {'id': 24677217, 'created_at': 'Mon Mar 16 11:19:30 +0000 2009', 'last_active': 'Wed Feb 15 13:51:04 +0000 2023', 'followers_count': 20183} compare_users Function: TwitterAPI.compare_users(users: List[str | int], compare: str | List[LITERALS_COMPARE_USERS], return_timestamp: bool = False, features: List[str] | None = None) Compare two or more users with the specified comparison attribute(s). For one attribute, only the corresponding value is returned. For multiple attributes, a dictionary with the key-value pairs of the requested attributes is returned. Args: users (List[str | int]): User IDs or unique screen names. compare (str | List[LITERALS_COMPARE_USERS]): Comparison attribute(s) by which users are compared. These must be from this list: Detailed description of user comparison attributes . See the link for detailed description of the attributes. return_timestamp (bool, optional): Add UTC Timestamp of the request to results. Defaults to False. features (List[str], optional): Defined features of Twitter User Object on which similarity will be computed. Must be from: followers_count , friends_count , listed_count , favourites_count , statuses_count . Must be provided if similarity comparison attribute was passed in. Defaults to None. References: https://developer.twitter.com/en/docs/twitter-api/v1/data-dictionary/object-model/user https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show Example: # compare number of tweets results = api.compare_users([\"WWU_Muenster\", \"goetheuni\", \"UniKonstanz\"], compare=\"tweets_count\", return_timestamp=True) print(results) will print: {'tweets_count': { 'WWU_Muenster': 11670, 'goetheuni': 7245, 'UniKonstanz': 9857, 'metrics': { 'max': 11670, 'min': 7245, 'mean': 9590.666666666666, 'median': 9857.0, 'std': 1816.288584510243, 'var': 3298904.222222222, 'range': 4425, 'IQR': 2212.5, 'mad': 1563.777777777778}}, 'utc_timestamp': '2023-02-12 18:05:33.152930'} tweet_info Function: tweet_info(tweet_id: str | int, attributes: List[LITERALS_TWEET_INFO] | str, return_timestamp: bool = False) Receive requested Tweet information from Tweet Object. For one attribute, only the corresponding value is returned. For multiple attributes, a dictionary with the key-value pairs of the requested attributes is returned. Args: tweet_id (str | int): Tweet ID either in string or integer representation. attributes (List[LITERALS_TWEET_INFO] | str): Attribute(s) of the Tweet object. These must be from this list: Detailed description of Tweet information attributes . See the link for detailed description of the attributes. return_timestamp (bool, optional): Add UTC Timestamp of the request to results. Defaults to False. References: https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-lookup https://developer.twitter.com/en/docs/twitter-api/v1/data-dictionary/object-model/tweet https://developer.twitter.com/en/docs/twitter-api/annotations/overview Example: # request creation date, language, and sentiment attributes for specified Tweet results = api.tweet_info(1612443577447026689, [\"created_at\", \"lang\", \"sentiment\"], return_timestamp=True) print(results) will print: { 'created_at': 'Mon Jan 09 13:38:01 +0000 2023', 'lang': 'de', 'sentiment': 'neutral', 'utc_timestamp': '2023-02-12 18:02:52.622169' } compare_tweets Function: compare_tweets(tweet_ids: List[str | int], compare: str | List[LITERALS_COMPARE_TWEETS], return_timestamp: bool = False, features: List[str] | None = None) Compare two or more Tweets with the specified comparison attribute. For one attribute, only the corresponding value is returned. For multiple attributes, a dictionary with the key-value pairs of the requested attributes is returned. Args: tweet_ids (List[str | int]): Tweet IDs either in string or integer representation. At least two Tweet IDs are required. compare (str | List[LITERALS_COMPARE_TWEETS]): Comparison attribute(s) by which Tweets are compared. These must be from this list: Detailed description of Tweet comparison attributes . See the link for detailed description of the attributes. return_timestamp (bool optional): Add UTC Timestamp of the request to results. Defaults to False. features (List[str], optional): Defined features of Tweet Object on which similarity will be computed. Must be from: public_metrics (i.e., retweet_count , reply_count , like_count , quote_count , impression_count ). Must be provided if similarity comparison attribute was passed in. Defaults to None. References: https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-lookup https://developer.twitter.com/en/docs/twitter-api/v1/data-dictionary/object-model/tweet Example: # get common liking users of specified Tweets results = api.compare_tweets(tweet_ids=[1612443577447026689, 1611301422364082180, 1612823288723476480], compare=\"common_liking_users\") print(results) will print: [3862364523] For all functions, a comparison over time can be achieved by using the return_timestamp argument for each request, storing the data in a JSON or CSV file using the export_to_json and export_to_csv , respectively, and append new records to existing files with the append_to_json or append_to_csv utility functions. Example: # request results for Tweet comparison, return timestamp results = api.compare_tweets([1612443577447026689, 1611301422364082180, 1612823288723476480], compare=[\"common_liking_users\"], return_timestamp=True) # export to JSON file export_to_json(results, export_path=\"compare_tweets.json\") # some time later... # generate new results that should be appended in the next step new_results = api.compare_tweets([1612443577447026689, 1611301422364082180, 1612823288723476480], compare=[\"common_liking_users\"], return_timestamp=True) # append to an existing file. append_to_json(new_results, \"compare_tweets.json\") The compare_tweets.json could then look like this: { \"data\": [ { \"common_liking_users\": [3862364523], \"utc_timestamp\": \"2023-02-21 11:26:45.885444\" }, { \"common_liking_users\": [3862364523, 20965264523], \"utc_timestamp\": \"2023-02-22 12:31:23.765328\" } ] }","title":"TwitterAPI"},{"location":"user-guide/overview/TwitterAPI/#twitterapi","text":"This class provides a Twitter API interface in order to interact with the Twitter Search API v2. It is built on top of the tweepy.Client class. Thus, it supports all methods from the Tweepy client. Additional functions are added. The following functions are available: user_info compare_users tweet_info compare_tweets","title":"TwitterAPI"},{"location":"user-guide/overview/TwitterAPI/#initialization","text":"Header: TwitterAPI(bearer_token: Optional[Any] = None, consumer_key: Optional[Any] = None, consumer_secret: Optional[Any] = None, access_token: Optional[Any] = None, access_token_secret: Optional[Any] = None, x_rapidapi_key: Optional[Any] = None, x_rapidapi_host: Optional[Any] = None, wait_on_rate_limit: bool = True) Args: bearer_token : Twitter API OAuth 2.0 Bearer Token consumer_key : Twitter API OAuth 1.0a Consumer Key consumer_secret : Twitter API OAuth 1.0a Consumer Secret access_token : Twitter API OAuth 1.0a Access Token access_token_secret : Twitter API OAuth 1.0a Access Token Secret x_rapidapi_key : Access Token for the Botometer API from the RapidAPI platform x_rapidapi_host : Host for the Botometer API from the RapidAPI platform wait_on_rate_limit : Whether to wait when rate limit is reached. Defaults to True.","title":"Initialization"},{"location":"user-guide/overview/TwitterAPI/#user_info","text":"Function: TwitterAPI.user_info(user: str | int, attributes: List[LITERALS_USER_INFO] | str, return_timestamp: bool = False) Receive requested user information from Twitter User Object. For one attribute, only the corresponding value is returned. For multiple attributes, a dictionary with the key-value pairs of the requested attributes is returned. Args: user (str | int): Twitter User either specified by corresponding ID or screen name. attributes (List[LITERALS_USER_INFO] | str): Attributes of the User object. These must be from this list: Detailed description of user information attributes . See the link for detailed description of the attributes. return_timestamp (bool): Add UTC Timestamp of the request to results. Defaults to False. References: https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup https://developer.twitter.com/en/docs/twitter-api/v1/data-dictionary/object-model/user Example: # request user information from the University of M\u00fcnster results = api.user_info(\"WWU_Muenster\", [\"id\", \"created_at\", \"last_active\", \"followers_count\"]) print(results) will print: {'id': 24677217, 'created_at': 'Mon Mar 16 11:19:30 +0000 2009', 'last_active': 'Wed Feb 15 13:51:04 +0000 2023', 'followers_count': 20183}","title":"user_info"},{"location":"user-guide/overview/TwitterAPI/#compare_users","text":"Function: TwitterAPI.compare_users(users: List[str | int], compare: str | List[LITERALS_COMPARE_USERS], return_timestamp: bool = False, features: List[str] | None = None) Compare two or more users with the specified comparison attribute(s). For one attribute, only the corresponding value is returned. For multiple attributes, a dictionary with the key-value pairs of the requested attributes is returned. Args: users (List[str | int]): User IDs or unique screen names. compare (str | List[LITERALS_COMPARE_USERS]): Comparison attribute(s) by which users are compared. These must be from this list: Detailed description of user comparison attributes . See the link for detailed description of the attributes. return_timestamp (bool, optional): Add UTC Timestamp of the request to results. Defaults to False. features (List[str], optional): Defined features of Twitter User Object on which similarity will be computed. Must be from: followers_count , friends_count , listed_count , favourites_count , statuses_count . Must be provided if similarity comparison attribute was passed in. Defaults to None. References: https://developer.twitter.com/en/docs/twitter-api/v1/data-dictionary/object-model/user https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show Example: # compare number of tweets results = api.compare_users([\"WWU_Muenster\", \"goetheuni\", \"UniKonstanz\"], compare=\"tweets_count\", return_timestamp=True) print(results) will print: {'tweets_count': { 'WWU_Muenster': 11670, 'goetheuni': 7245, 'UniKonstanz': 9857, 'metrics': { 'max': 11670, 'min': 7245, 'mean': 9590.666666666666, 'median': 9857.0, 'std': 1816.288584510243, 'var': 3298904.222222222, 'range': 4425, 'IQR': 2212.5, 'mad': 1563.777777777778}}, 'utc_timestamp': '2023-02-12 18:05:33.152930'}","title":"compare_users"},{"location":"user-guide/overview/TwitterAPI/#tweet_info","text":"Function: tweet_info(tweet_id: str | int, attributes: List[LITERALS_TWEET_INFO] | str, return_timestamp: bool = False) Receive requested Tweet information from Tweet Object. For one attribute, only the corresponding value is returned. For multiple attributes, a dictionary with the key-value pairs of the requested attributes is returned. Args: tweet_id (str | int): Tweet ID either in string or integer representation. attributes (List[LITERALS_TWEET_INFO] | str): Attribute(s) of the Tweet object. These must be from this list: Detailed description of Tweet information attributes . See the link for detailed description of the attributes. return_timestamp (bool, optional): Add UTC Timestamp of the request to results. Defaults to False. References: https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-lookup https://developer.twitter.com/en/docs/twitter-api/v1/data-dictionary/object-model/tweet https://developer.twitter.com/en/docs/twitter-api/annotations/overview Example: # request creation date, language, and sentiment attributes for specified Tweet results = api.tweet_info(1612443577447026689, [\"created_at\", \"lang\", \"sentiment\"], return_timestamp=True) print(results) will print: { 'created_at': 'Mon Jan 09 13:38:01 +0000 2023', 'lang': 'de', 'sentiment': 'neutral', 'utc_timestamp': '2023-02-12 18:02:52.622169' }","title":"tweet_info"},{"location":"user-guide/overview/TwitterAPI/#compare_tweets","text":"Function: compare_tweets(tweet_ids: List[str | int], compare: str | List[LITERALS_COMPARE_TWEETS], return_timestamp: bool = False, features: List[str] | None = None) Compare two or more Tweets with the specified comparison attribute. For one attribute, only the corresponding value is returned. For multiple attributes, a dictionary with the key-value pairs of the requested attributes is returned. Args: tweet_ids (List[str | int]): Tweet IDs either in string or integer representation. At least two Tweet IDs are required. compare (str | List[LITERALS_COMPARE_TWEETS]): Comparison attribute(s) by which Tweets are compared. These must be from this list: Detailed description of Tweet comparison attributes . See the link for detailed description of the attributes. return_timestamp (bool optional): Add UTC Timestamp of the request to results. Defaults to False. features (List[str], optional): Defined features of Tweet Object on which similarity will be computed. Must be from: public_metrics (i.e., retweet_count , reply_count , like_count , quote_count , impression_count ). Must be provided if similarity comparison attribute was passed in. Defaults to None. References: https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-lookup https://developer.twitter.com/en/docs/twitter-api/v1/data-dictionary/object-model/tweet Example: # get common liking users of specified Tweets results = api.compare_tweets(tweet_ids=[1612443577447026689, 1611301422364082180, 1612823288723476480], compare=\"common_liking_users\") print(results) will print: [3862364523] For all functions, a comparison over time can be achieved by using the return_timestamp argument for each request, storing the data in a JSON or CSV file using the export_to_json and export_to_csv , respectively, and append new records to existing files with the append_to_json or append_to_csv utility functions. Example: # request results for Tweet comparison, return timestamp results = api.compare_tweets([1612443577447026689, 1611301422364082180, 1612823288723476480], compare=[\"common_liking_users\"], return_timestamp=True) # export to JSON file export_to_json(results, export_path=\"compare_tweets.json\") # some time later... # generate new results that should be appended in the next step new_results = api.compare_tweets([1612443577447026689, 1611301422364082180, 1612823288723476480], compare=[\"common_liking_users\"], return_timestamp=True) # append to an existing file. append_to_json(new_results, \"compare_tweets.json\") The compare_tweets.json could then look like this: { \"data\": [ { \"common_liking_users\": [3862364523], \"utc_timestamp\": \"2023-02-21 11:26:45.885444\" }, { \"common_liking_users\": [3862364523, 20965264523], \"utc_timestamp\": \"2023-02-22 12:31:23.765328\" } ] }","title":"compare_tweets"},{"location":"user-guide/overview/Utilities/","text":"Utility Functions Utility functions are defined to read and write to specific files. The files can be imported via from pysna.utils import export_to_json, export_to_csv, append_to_json, append_to_csv, load_from_json or are included in the import-all-statement: from pysna import * Export to JSON Function: export_to_json(data: dict, export_path: str, encoding: str = 'utf-8', ensure_ascii: bool = False, *args) Export dictionary data to JSON file. Function will add a data key for the JSON file and store the provided dictionary inside the data field. Args: data (dict): Data dictionary. export_path (str): Export path including file name and extension. encoding (str, optional): Encoding of JSON file. Defaults to UTF-8. args (optional): Further arguments to be passed to json.dump() . References: https://docs.python.org/3/library/json.html NOTE: When trying to export a dictionary containing tuples as keys, the function will try to serialize them by converting tuples to strings. Then, a tuple like (\"WWU_Muenster\", \"goetheuni\") will be encoded to: \"__tuples__['WWU_Muenster', 'goetheuni']\" . For recovering the original dictionary after JSON export, use the load_from_json function. Example: # request results for Tweet comparison, return timestamp results = api.compare_tweets([1612443577447026689, 1611301422364082180, 1612823288723476480], compare=[\"common_liking_users\"], return_timestamp=True) # export to JSON file export_to_json(results, export_path=\"compare_tweets.json\") The exported compare_tweets.json file will the look like: { \"data\": [ { \"common_liking_users\": [ 3862364523 ], \"utc_timestamp\": \"2023-01-31 09:22:11.996652\" } } Append to JSON Function: append_to_json(input_dict: Dict[str, Any], filepath: str, encoding: str = \"utf-8\", **kwargs) Append a dictionary to an existing JSON file. Existing JSON file needs a 'data' key. Args: input_dict : Dictionary containing new data that should be added to file. filepath : Absolute or relative filepath including the file extension. Depending on the current working directory. encoding : The encoding of the file. Defaults to UTF-8. kwargs : Additional keyword arguments to be passed to json.dump() and json.load() References: https://docs.python.org/3/library/json.html Note: When trying to append a dictionary containing tuples as keys, the function will try to serialize them by converting tuples to strings. For recovering the original dictionary after JSON export, use the load_from_json function. Example: # generate new results that should be appended in the next step new_results = api.compare_tweets([1612443577447026689, 1611301422364082180, 1612823288723476480], compare=[\"common_liking_users\"], return_timestamp=True) # append to an existing file. append_to_json(new_results, \"compare_tweets.json\") The extended compare_tweets.json file will be supplemented with one further entry within the data field. An example output could look like: { \"data\": [ { \"common_liking_users\": [ 3862364523 ], \"utc_timestamp\": \"2023-01-31 09:22:11.996652\" }, { \"common_liking_users\": [ 3862364523 ], \"utc_timestamp\": \"2023-01-31 09:23:05.848485\" } ] } Load from JSON Function: load_from_json(filepath: str, encoding: str = \"utf-8\", **kwargs) -> dict Load Python Dictionary from JSON file. Tuples are recovered. Args: filepath (str): Path to JSON file. encoding (str, optional): Encoding of file. Defaults to UTF-8. kwargs (optional): Keyword arguments to be passed to json.load() . Returns: Python Dictionary containing (deserialized) data from JSON file. References: https://docs.python.org/3/library/json.html NOTE : Tuples that have been encoded by the export_to_json function with a leading __tuples__ string will be recovered to original tuple representation. For instance, a encoded tuple __tuple__ [\"WWU_Muenster\", \"goetheuni\"] will be returned as (\"WWU_Muenster\", \"goetheuni\") . Example: Suppose an example.json file containing one entry with a serialized tuple key: { \"data\": [ { \"__tuple__ ['WWU_Muenster', 'goetheuni']\": 0.578077 } ] } By calling: from pysna.utils import load_from_json data = load_from_json(\"example.json\") print(data) the tuple will be recovered and a conventional Python Dictionary will be returned: {(\"WWU_Muenster\", \"goetheuni\"): 0.578077} Export to CSV Function: export_to_csv(data: dict, export_path: str, encoding: str = \"utf-8\", sep: str = \",\", **kwargs) Export dictionary data to CSV file. Will raise an exception if data dictionary contains nested dictionaries. Args: data (dict): Data dictionary export_path (str): Exportpath including file name and extension. encoding (str, optional): Encoding of CSV file. Defaults to UTF-8. sep (str, optional): Value separator for CSV file. Defaults to ',' . kwargs (optional): Keyword arguments for pandas.DataFrame.to_csv . References: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_csv.html Example: # request results for user information, return timestamp results = api.user_info(\"WWU_Muenster\", [\"id\", \"location\", \"friends_count\", \"followers_count\", \"last_active\", \"statuses_count\"], return_timestamp=True) # export to CSV file export_to_csv(results, export_path=\"user_info.csv\") Append to CSV Function: append_to_csv(data: dict, filepath: str, encoding: str = \"utf-8\", sep: str = \",\", *args) Append a dictionary to an existing CSV file. Will raise an exception if data dictionary contains nested dictionaries. Args: data (dict): Dictionary containing new data that should be added to file. filepath (str): Absolute or relative filepath including the file extension. Depending on the current working directory. encoding (str, optional): Encoding of CSV file. Defaults to UTF-8. sep (str, optional): Value separator for CSV file. Defaults to \",\". args : Keyword Arguments for reading and writing from/to CSV file from pandas. Pass in: *[read_kwargs, write_kwargs] , whereas both are dictionaries (i.e., provide a list of two dictionaries). References: https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_csv.html Example: # request results for user information, return timestamp results = api.user_info(\"WWU_Muenster\", [\"id\", \"location\", \"friends_count\", \"followers_count\", \"last_active\", \"statuses_count\"], return_timestamp=True) # export to CSV file append_to_csv(results, filepath=\"user_info.csv\") Notes Only JSON and CSV file formats are supported, yet.","title":"Utility Functions"},{"location":"user-guide/overview/Utilities/#utility-functions","text":"Utility functions are defined to read and write to specific files. The files can be imported via from pysna.utils import export_to_json, export_to_csv, append_to_json, append_to_csv, load_from_json or are included in the import-all-statement: from pysna import *","title":"Utility Functions"},{"location":"user-guide/overview/Utilities/#export-to-json","text":"Function: export_to_json(data: dict, export_path: str, encoding: str = 'utf-8', ensure_ascii: bool = False, *args) Export dictionary data to JSON file. Function will add a data key for the JSON file and store the provided dictionary inside the data field. Args: data (dict): Data dictionary. export_path (str): Export path including file name and extension. encoding (str, optional): Encoding of JSON file. Defaults to UTF-8. args (optional): Further arguments to be passed to json.dump() . References: https://docs.python.org/3/library/json.html NOTE: When trying to export a dictionary containing tuples as keys, the function will try to serialize them by converting tuples to strings. Then, a tuple like (\"WWU_Muenster\", \"goetheuni\") will be encoded to: \"__tuples__['WWU_Muenster', 'goetheuni']\" . For recovering the original dictionary after JSON export, use the load_from_json function. Example: # request results for Tweet comparison, return timestamp results = api.compare_tweets([1612443577447026689, 1611301422364082180, 1612823288723476480], compare=[\"common_liking_users\"], return_timestamp=True) # export to JSON file export_to_json(results, export_path=\"compare_tweets.json\") The exported compare_tweets.json file will the look like: { \"data\": [ { \"common_liking_users\": [ 3862364523 ], \"utc_timestamp\": \"2023-01-31 09:22:11.996652\" } }","title":"Export to JSON"},{"location":"user-guide/overview/Utilities/#append-to-json","text":"Function: append_to_json(input_dict: Dict[str, Any], filepath: str, encoding: str = \"utf-8\", **kwargs) Append a dictionary to an existing JSON file. Existing JSON file needs a 'data' key. Args: input_dict : Dictionary containing new data that should be added to file. filepath : Absolute or relative filepath including the file extension. Depending on the current working directory. encoding : The encoding of the file. Defaults to UTF-8. kwargs : Additional keyword arguments to be passed to json.dump() and json.load() References: https://docs.python.org/3/library/json.html Note: When trying to append a dictionary containing tuples as keys, the function will try to serialize them by converting tuples to strings. For recovering the original dictionary after JSON export, use the load_from_json function. Example: # generate new results that should be appended in the next step new_results = api.compare_tweets([1612443577447026689, 1611301422364082180, 1612823288723476480], compare=[\"common_liking_users\"], return_timestamp=True) # append to an existing file. append_to_json(new_results, \"compare_tweets.json\") The extended compare_tweets.json file will be supplemented with one further entry within the data field. An example output could look like: { \"data\": [ { \"common_liking_users\": [ 3862364523 ], \"utc_timestamp\": \"2023-01-31 09:22:11.996652\" }, { \"common_liking_users\": [ 3862364523 ], \"utc_timestamp\": \"2023-01-31 09:23:05.848485\" } ] }","title":"Append to JSON"},{"location":"user-guide/overview/Utilities/#load-from-json","text":"Function: load_from_json(filepath: str, encoding: str = \"utf-8\", **kwargs) -> dict Load Python Dictionary from JSON file. Tuples are recovered. Args: filepath (str): Path to JSON file. encoding (str, optional): Encoding of file. Defaults to UTF-8. kwargs (optional): Keyword arguments to be passed to json.load() . Returns: Python Dictionary containing (deserialized) data from JSON file. References: https://docs.python.org/3/library/json.html NOTE : Tuples that have been encoded by the export_to_json function with a leading __tuples__ string will be recovered to original tuple representation. For instance, a encoded tuple __tuple__ [\"WWU_Muenster\", \"goetheuni\"] will be returned as (\"WWU_Muenster\", \"goetheuni\") . Example: Suppose an example.json file containing one entry with a serialized tuple key: { \"data\": [ { \"__tuple__ ['WWU_Muenster', 'goetheuni']\": 0.578077 } ] } By calling: from pysna.utils import load_from_json data = load_from_json(\"example.json\") print(data) the tuple will be recovered and a conventional Python Dictionary will be returned: {(\"WWU_Muenster\", \"goetheuni\"): 0.578077}","title":"Load from JSON"},{"location":"user-guide/overview/Utilities/#export-to-csv","text":"Function: export_to_csv(data: dict, export_path: str, encoding: str = \"utf-8\", sep: str = \",\", **kwargs) Export dictionary data to CSV file. Will raise an exception if data dictionary contains nested dictionaries. Args: data (dict): Data dictionary export_path (str): Exportpath including file name and extension. encoding (str, optional): Encoding of CSV file. Defaults to UTF-8. sep (str, optional): Value separator for CSV file. Defaults to ',' . kwargs (optional): Keyword arguments for pandas.DataFrame.to_csv . References: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_csv.html Example: # request results for user information, return timestamp results = api.user_info(\"WWU_Muenster\", [\"id\", \"location\", \"friends_count\", \"followers_count\", \"last_active\", \"statuses_count\"], return_timestamp=True) # export to CSV file export_to_csv(results, export_path=\"user_info.csv\")","title":"Export to CSV"},{"location":"user-guide/overview/Utilities/#append-to-csv","text":"Function: append_to_csv(data: dict, filepath: str, encoding: str = \"utf-8\", sep: str = \",\", *args) Append a dictionary to an existing CSV file. Will raise an exception if data dictionary contains nested dictionaries. Args: data (dict): Dictionary containing new data that should be added to file. filepath (str): Absolute or relative filepath including the file extension. Depending on the current working directory. encoding (str, optional): Encoding of CSV file. Defaults to UTF-8. sep (str, optional): Value separator for CSV file. Defaults to \",\". args : Keyword Arguments for reading and writing from/to CSV file from pandas. Pass in: *[read_kwargs, write_kwargs] , whereas both are dictionaries (i.e., provide a list of two dictionaries). References: https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_csv.html Example: # request results for user information, return timestamp results = api.user_info(\"WWU_Muenster\", [\"id\", \"location\", \"friends_count\", \"followers_count\", \"last_active\", \"statuses_count\"], return_timestamp=True) # export to CSV file append_to_csv(results, filepath=\"user_info.csv\")","title":"Append to CSV"},{"location":"user-guide/overview/Utilities/#notes","text":"Only JSON and CSV file formats are supported, yet.","title":"Notes"},{"location":"user-guide/overview/cli/","text":"Command-line Interface Tool The main functions from the TwitterAPI class are also available on the CLI. To see the usage instructions and help, run: pysna -h If you wish to see the usage instructions for a function, run: pysna <function> --help For example, if you want to request a comparison of two users, you can run: pysna compare-users \"WWU_Muenster\" \"goetheuni\" -c \"tweets_count\" \"common_followers\" -o \"results.json\" --return-timestamp This will perform a comparison on the \"WWU_Muenster\" and \"goetheuni\" Twitter Accounts based their number of composed Tweets and their common followers. The results are exported to the results.json file. Also, the timestamp of the request will be returned. NOTE : Every request needs valid credentials for the official Twitter API. Thus, pass in a .env file to every function call by using the --env flag or use the set-secrets function to set the API secrets for upcoming requests (recommended). Functions set-secrets In order to set the API secrets to run every command from any working directory, it is recommended to use this function. The function will copy the given .env file to the ~/.pysna/config/ directory and will create a config file containing your API secrets. This file will be read every time a request is made. If you wish to overwrite the existing config file containing the secrets, rerun this function with a new .env file. If you wish to use other secrets for authentification sporadically, you can use the --env flag of every function to use different secrets than specified in the config file. NOTE : The provided .env file must have the format: BEARER_TOKEN=... CONSUMER_KEY=... CONSUMER_SECRET=... ACCESS_TOKEN=... ACCESS_TOKEN_SECRET=... X_RAPIDAPI_KEY=... X_RAPIDAPI_HOST=... BEARER_TOKEN : Twitter API OAuth 2.0 Bearer Token CONSUMER_KEY : Twitter API OAuth 1.0a Consumer Key CONSUMER_SECRET : Twitter API OAuth 1.0a Consumer Secret ACCESS_TOKEN : Twitter API OAuth 1.0a Access Token ACCESS_TOKEN_SECRET : Twitter API OAuth 1.0a Access Token Secret X_RAPIDAPI_KEY : Access Token for the Botometer API from the RapidAPI platform X_RAPIDAPI_HOST : Host for the Botometer API from the RapidAPI platform Only .env files are supported, yet. Example: pysna set-secrets local.env or, if you want to use different secrets for a request, use the --env flag: pysna compare-users [...] --env ./local.env user-info Command: pysna user-info <user> <attributes> [--return-timestamp] [--output] [--append] [--encoding] [--env] Args: user (required): Twitter User ID or unique screen name attributes (required): pass in desired attributes separated by space. For a list of attributes, see the corresponding section in the overview . return-timestamp (optional): return UTC timestamp of the query. output (optional): writes the output to a file. Pass in the file path and file name including the extension. If empty, output is printed to the CLI. Currently, CSV and JSON exports are supported. (e.g., write output.json for JSON export.). Flag short form: -o . append (optional): appends the output to an existing file. Pass in the path to the existing file with the output flag. encoding (optional): specify file encoding. Defaults to UTF-8. env (positional): specify path to environment file. Defaults to ~/.pysna/config/secrets.env (i.e., the config file path set via the set-secrets function). Flag short form: -e . compare-users Command: pysna compare-users <users> -c <compare> [--features] [--return-timestamp] [--output] [--append] [--encoding] [--env] Args: users (required): IDs or unique screen names of Twitter users. Pass in the users separated by space. compare (required): Comparison attributes Must be from the following: relationship , followers_count , followees_count , tweets_count , favourites_count , common_followers , distinct_followers , common_followees , distinct_followees , commonly_liked_tweets , distinctly_liked_tweets , similarity , created_at , protected , verified . For an overview of what the comparison attributes do, see the corresponding section in the overview . Provide the comparison attributes separated by space after the -c flag. features (positional): Define the components of the feature vector for the similarity comparison attribute. Must be passed in if the aforementioned comparison attribute was provided. Features must be from: followers_count , friends_count , listed_count , favourites_count , statuses_count . return-timestamp (optional): return UTC timestamp of the query. output (optional): writes the output to a file. Pass in the file path and file name including the extension. If empty, output is printed to the CLI. Currently, CSV and JSON exports are supported. (e.g., write output.json for JSON export.). Flag short form: -o . append (optional): appends the output to an existing file. Pass in the path to the existing file with the output flag. encoding (optional): specify file encoding. Defaults to UTF-8. env (positional): specify path to environment file. Defaults to ~/.pysna/config/secrets.env (i.e., the config file path set via the set-secrets function). Flag short form: -e . tweet-info Command: pysna tweet-info <tweet> <attributes> [--return-timestamp] [--output] [--append] [--encoding] [--env] Args: tweet (required): Unique Tweet ID. attributes (required): pass in desired attributes separated by space. For a list of attributes, see the corresponding section in the overview . return-timestamp (optional): return UTC timestamp of the query. output (optional): writes the output to a file. Pass in the file path and file name including the extension. If empty, output is printed to the CLI. Currently, CSV and JSON exports are supported. (e.g., write output.json for JSON export.) Flag short form: -o . append (optional): appends the output to an existing file. Pass in the path to the existing file with the output flag. encoding (optional): specify file encoding. Defaults to UTF-8. env (positional): specify path to environment file. Defaults to ~/.pysna/config/secrets.env (i.e., the config file path set via the set-secrets function). Flag short form: -e . compare-tweets Command: pysna compare-tweets <tweets> -c <compare> [--features] [--return-timestamp] [--output] [--append] [--encoding] [--env] Args: tweets (required): Unique Tweet IDs separated by space. compare (required): Comparison attributes Must be from the following: view_count , like_count , retweet_count , quote_count , reply_count , common_quoting_users , distinct_quoting_users , common_liking_users , distinct_liking_users , common_retweeters , distinct_retweeters , similarity , created_at . For an overview of what the comparison attributes do, see the corresponding section in the overview . Provide the comparison attributes separated by space after the -c flag. features (positional): Define the components of the feature vector for the similarity comparison attribute. Must be passed in if the aforementioned comparison attribute was provided. Features must be from: retweet_count , favorite_count . return-timestamp (optional): return UTC timestamp of the query. output (optional): writes the output to a file. Pass in the file path and file name including the extension. If empty, output is printed to the CLI. Currently, CSV and JSON exports are supported. (e.g., write output.json for JSON export.). Flag short form: -o . append (optional): appends the output to an existing file. Pass in the path to the existing file with the output flag. encoding (optional): specify file encoding. Defaults to UTF-8. env (positional): specify path to environment file. Defaults to ~/.pysna/config/secrets.env (i.e., the config file path set via the set-secrets function). Flag short form: -e .","title":"CLI Tool"},{"location":"user-guide/overview/cli/#command-line-interface-tool","text":"The main functions from the TwitterAPI class are also available on the CLI. To see the usage instructions and help, run: pysna -h If you wish to see the usage instructions for a function, run: pysna <function> --help For example, if you want to request a comparison of two users, you can run: pysna compare-users \"WWU_Muenster\" \"goetheuni\" -c \"tweets_count\" \"common_followers\" -o \"results.json\" --return-timestamp This will perform a comparison on the \"WWU_Muenster\" and \"goetheuni\" Twitter Accounts based their number of composed Tweets and their common followers. The results are exported to the results.json file. Also, the timestamp of the request will be returned. NOTE : Every request needs valid credentials for the official Twitter API. Thus, pass in a .env file to every function call by using the --env flag or use the set-secrets function to set the API secrets for upcoming requests (recommended).","title":"Command-line Interface Tool"},{"location":"user-guide/overview/cli/#functions","text":"","title":"Functions"},{"location":"user-guide/overview/cli/#set-secrets","text":"In order to set the API secrets to run every command from any working directory, it is recommended to use this function. The function will copy the given .env file to the ~/.pysna/config/ directory and will create a config file containing your API secrets. This file will be read every time a request is made. If you wish to overwrite the existing config file containing the secrets, rerun this function with a new .env file. If you wish to use other secrets for authentification sporadically, you can use the --env flag of every function to use different secrets than specified in the config file. NOTE : The provided .env file must have the format: BEARER_TOKEN=... CONSUMER_KEY=... CONSUMER_SECRET=... ACCESS_TOKEN=... ACCESS_TOKEN_SECRET=... X_RAPIDAPI_KEY=... X_RAPIDAPI_HOST=... BEARER_TOKEN : Twitter API OAuth 2.0 Bearer Token CONSUMER_KEY : Twitter API OAuth 1.0a Consumer Key CONSUMER_SECRET : Twitter API OAuth 1.0a Consumer Secret ACCESS_TOKEN : Twitter API OAuth 1.0a Access Token ACCESS_TOKEN_SECRET : Twitter API OAuth 1.0a Access Token Secret X_RAPIDAPI_KEY : Access Token for the Botometer API from the RapidAPI platform X_RAPIDAPI_HOST : Host for the Botometer API from the RapidAPI platform Only .env files are supported, yet. Example: pysna set-secrets local.env or, if you want to use different secrets for a request, use the --env flag: pysna compare-users [...] --env ./local.env","title":"set-secrets"},{"location":"user-guide/overview/cli/#user-info","text":"Command: pysna user-info <user> <attributes> [--return-timestamp] [--output] [--append] [--encoding] [--env] Args: user (required): Twitter User ID or unique screen name attributes (required): pass in desired attributes separated by space. For a list of attributes, see the corresponding section in the overview . return-timestamp (optional): return UTC timestamp of the query. output (optional): writes the output to a file. Pass in the file path and file name including the extension. If empty, output is printed to the CLI. Currently, CSV and JSON exports are supported. (e.g., write output.json for JSON export.). Flag short form: -o . append (optional): appends the output to an existing file. Pass in the path to the existing file with the output flag. encoding (optional): specify file encoding. Defaults to UTF-8. env (positional): specify path to environment file. Defaults to ~/.pysna/config/secrets.env (i.e., the config file path set via the set-secrets function). Flag short form: -e .","title":"user-info"},{"location":"user-guide/overview/cli/#compare-users","text":"Command: pysna compare-users <users> -c <compare> [--features] [--return-timestamp] [--output] [--append] [--encoding] [--env] Args: users (required): IDs or unique screen names of Twitter users. Pass in the users separated by space. compare (required): Comparison attributes Must be from the following: relationship , followers_count , followees_count , tweets_count , favourites_count , common_followers , distinct_followers , common_followees , distinct_followees , commonly_liked_tweets , distinctly_liked_tweets , similarity , created_at , protected , verified . For an overview of what the comparison attributes do, see the corresponding section in the overview . Provide the comparison attributes separated by space after the -c flag. features (positional): Define the components of the feature vector for the similarity comparison attribute. Must be passed in if the aforementioned comparison attribute was provided. Features must be from: followers_count , friends_count , listed_count , favourites_count , statuses_count . return-timestamp (optional): return UTC timestamp of the query. output (optional): writes the output to a file. Pass in the file path and file name including the extension. If empty, output is printed to the CLI. Currently, CSV and JSON exports are supported. (e.g., write output.json for JSON export.). Flag short form: -o . append (optional): appends the output to an existing file. Pass in the path to the existing file with the output flag. encoding (optional): specify file encoding. Defaults to UTF-8. env (positional): specify path to environment file. Defaults to ~/.pysna/config/secrets.env (i.e., the config file path set via the set-secrets function). Flag short form: -e .","title":"compare-users"},{"location":"user-guide/overview/cli/#tweet-info","text":"Command: pysna tweet-info <tweet> <attributes> [--return-timestamp] [--output] [--append] [--encoding] [--env] Args: tweet (required): Unique Tweet ID. attributes (required): pass in desired attributes separated by space. For a list of attributes, see the corresponding section in the overview . return-timestamp (optional): return UTC timestamp of the query. output (optional): writes the output to a file. Pass in the file path and file name including the extension. If empty, output is printed to the CLI. Currently, CSV and JSON exports are supported. (e.g., write output.json for JSON export.) Flag short form: -o . append (optional): appends the output to an existing file. Pass in the path to the existing file with the output flag. encoding (optional): specify file encoding. Defaults to UTF-8. env (positional): specify path to environment file. Defaults to ~/.pysna/config/secrets.env (i.e., the config file path set via the set-secrets function). Flag short form: -e .","title":"tweet-info"},{"location":"user-guide/overview/cli/#compare-tweets","text":"Command: pysna compare-tweets <tweets> -c <compare> [--features] [--return-timestamp] [--output] [--append] [--encoding] [--env] Args: tweets (required): Unique Tweet IDs separated by space. compare (required): Comparison attributes Must be from the following: view_count , like_count , retweet_count , quote_count , reply_count , common_quoting_users , distinct_quoting_users , common_liking_users , distinct_liking_users , common_retweeters , distinct_retweeters , similarity , created_at . For an overview of what the comparison attributes do, see the corresponding section in the overview . Provide the comparison attributes separated by space after the -c flag. features (positional): Define the components of the feature vector for the similarity comparison attribute. Must be passed in if the aforementioned comparison attribute was provided. Features must be from: retweet_count , favorite_count . return-timestamp (optional): return UTC timestamp of the query. output (optional): writes the output to a file. Pass in the file path and file name including the extension. If empty, output is printed to the CLI. Currently, CSV and JSON exports are supported. (e.g., write output.json for JSON export.). Flag short form: -o . append (optional): appends the output to an existing file. Pass in the path to the existing file with the output flag. encoding (optional): specify file encoding. Defaults to UTF-8. env (positional): specify path to environment file. Defaults to ~/.pysna/config/secrets.env (i.e., the config file path set via the set-secrets function). Flag short form: -e .","title":"compare-tweets"},{"location":"user-guide/overview/literals-compare-tweets/","text":"Detailed Description of the Attributes for the compare_tweets function: view_count : Compares the number of views the specified Tweets currently have. Will return additional statistical metrics on the numbers of views. like_count : Compares the number of likes the specified Tweets currently have. Will return additional statistical metrics on the numbers of likes. retweet_count : Compares the number of Retweets the specified Tweets currently have. Will return additional statistical metrics on the numbers of Retweets. quote_count : Compares the number of quotes the specified Tweets currently have. Will return additional statistical metrics on the numbers of quotes. reply_count : Compares the number of replies the specified Tweets currently have. Will return additional statistical metrics on the numbers of replies. common_quoting_users : Returns the set of quoting Twitter users all specified Tweets have in common. distinct_quoting_users : Returns the sets of distinct quoting Twitter users all specified Tweets have (i.e., the difference between the quoting Twitter users of all Tweets is calculated). common_liking_users : Returns the set of liking Twitter users all specified Tweets have in common. distinct_liking_users : Returns the sets of distinct liking Twitter users all specified Tweets have (i.e., the difference between the liking Twitter users of all Tweets is calculated). common_retweeters : Returns the set of retweeters all specified Tweets have in common. distinct_retweeters : Returns the sets of distinct retweeters all specified Tweets have (i.e., the difference between the retweeters of all Tweets is calculated). similarity : Computes the euclidean distance between two feature vectors. Each feature vector contains numerical attributes from each Tweet. The features that should be contained in the feature vector have to be provided in the features argument of the function. Available features are: retweet_count : The number of times a tweet was retweeted. reply_count : Number of replies a Tweet has. like_count : Number of likes a Tweet has. quote_count : Number of quotes a Tweet has. impression_count : Number of views a Tweet has. If more than two Tweets were provided, all possible pairs of combinations will be returned containing a distance. The smaller the distance, the more similar the Tweets are. Output will be sorted in ascending order, thus, most similar Tweets are on top. Each entry in the output contains a pair of two Tweets. created_at : Compares the specified Tweets on their creation dates. Additional Will return additional statistical metrics on the dates.","title":"Literals compare tweets"},{"location":"user-guide/overview/literals-compare-users/","text":"Detailed Description of the Attributes for the compare_users function: relationship : Returns detailed information about the relationship between a pair two arbitrary users. If more than two users were provided, all possible pairs of relationships will be returned. followers_count : Compares the number of followers the specified accounts currently have. Will return additional statistical metrics on the numbers of followers. followees_count : Compares the number of friends (AKA their \u201cfollowings\u201d or \"followees\") the specified accounts currently have. Will return additional statistical metrics on the numbers of friends. tweets_count : Compares the number of composed tweets the specified accounts currently have. Will return additional statistical metrics on the numbers of tweets. favourites_count : Compares the number of liked tweets the specified accounts currently have. Will return additional statistical metrics on the numbers of liked tweets. British spelling used in the field name for historical reasons. common_followers : Returns the set of followers all specified accounts have in common. distinct_followers : Returns the sets of distinct followers all specified accounts have (i.e., the difference between the followers of all accounts is calculated). common_followees : Returns the set of friends (AKA their \u201cfollowings\u201d or \"followees\") all specified accounts have in common. distinct_followees : Returns the sets of distinct friends (AKA their \u201cfollowings\u201d or \"followees\") all specified accounts have (i.e., the difference between the friends of all accounts is calculated). commonly_liked_tweets : Returns the set of liked tweets all specified accounts have in common. distinctly_liked_tweets : Returns the sets of distinct liked tweets all specified accounts have (i.e., the difference between all liked tweets of all accounts is calculated). similarity : Computes the euclidean distance between two feature vectors. Each feature vector contains numerical attributes from each user. The features that should be contained in the feature vector have to be provided in the features argument of the function. Available features are: followers_count : The number of followers this account currently has. friends_count : The number of users this account is following (AKA their \u201cfollowings\u201d or \"followees\"). listed_count : The number of public lists that this user is a member of. favourites_count : The number of Tweets this user has liked in the account\u2019s lifetime. British spelling used in the field name for historical reasons. statuses_count : The number of Tweets (including retweets) issued by the user. If more than two users were provided, all possible pairs of combinations will be returned containing a distance. The smaller the distance, the more similar the users are. Output will be sorted in ascending order, thus, most similar users are on top. Each entry in the output contains a pair of two users. created_at : Compares the specified accounts on their creation dates. Additional Will return additional statistical metrics on the dates. protected : Compares users on their protected attribute. When true, indicates that this user has chosen to protect their Tweets. verified : Compares users on their verified attribute. When true, indicates that the user has a verified account.","title":"Literals compare users"},{"location":"user-guide/overview/literals-tweet-info/","text":"Detailed Description of the Attributes for the tweet_info function: id : The integer representation of the unique identifier for this Tweet. id_str : The string representation of the unique identifier for this Tweet. text : The actual UTF-8 text of the status update. truncated : Indicates whether the value of the text parameter was truncated, for example, as a result of a retweet exceeding the original Tweet text length limit of 140 characters. Truncated text will end in ellipsis, like this ... Since Twitter now rejects long Tweets vs truncating them, the large majority of Tweets will have this set to false . Note that while native retweets may have their toplevel text property shortened, the original text will be available under the retweeted_status object and the truncated parameter will be set to the value of the original status (in most cases, false ). created_at : UTC time when this Tweet was created. entities : Entities which have been parsed out of the text of the Tweet (hashtags, URLs, user mentions, media, symbols, polls). tweet_annotations : Context annotations and named entities of the Tweet object. Context annotations are derived from the analysis of a Tweet\u2019s text and will include a domain and entity pairing which can be used to discover Tweets on topics that may have been previously difficult to surface. Named Entities are comprised of people, places, products, and organizations. Entities are delivered as part of the entity payload section. They are programmatically assigned based on what is explicitly mentioned (named-entity recognition) in the Tweet text. See the official website for further details. source : Utility used to post the Tweet, as an HTML-formatted string. Tweets from the Twitter website have a source value of web . author_info : Twitter User Object of the tweet author. retweeters : Twitter user IDs from retweeters. in_reply_to_status_id : If the represented Tweet is a reply, this field will contain the integer representation of the original Tweet\u2019s ID. (Nullable) in_reply_to_status_id_str : If the represented Tweet is a reply, this field will contain the string representation of the original Tweet\u2019s ID. (Nullable) in_reply_to_user_id : If the represented Tweet is a reply, this field will contain the integer representation of the original Tweet\u2019s author ID. This will not necessarily always be the user directly mentioned in the Tweet. (Nullable) in_reply_to_user_id_str : If the represented Tweet is a reply, this field will contain the string representation of the original Tweet\u2019s author ID. This will not necessarily always be the user directly mentioned in the Tweet. (Nullable) in_reply_to_screen_name : If the represented Tweet is a reply, this field will contain the screen name of the original Tweet\u2019s author. (Nullable) user : The user who posted this Tweet. See User data dictionary for complete list of attributes. coordinates : Represents the geographic location of this Tweet as reported by the user or client application. The inner coordinates array is formatted as geoJSON (longitude first, then latitude). (Nullable) place : When present, indicates that the tweet is associated (but not necessarily originating from) a place. (Nullable) is_quote_status : Indicates whether this is a Quoted Tweet. public_metrics : Public metrics for this Tweet containing (impressions_count (=views), quote_count, reply_count, retweet_count, favorite_count (=likes)) quoting_users : Twitter User IDs from users who quoted this Tweet. liking_users : Twitter User IDs from users who liked this Tweet. favorited : Indicates whether this Tweet has been liked by the authenticating user. (Nullable) retweeted : Indicates whether this Tweet has been Retweeted by the authenticating user. possibly_sensitive : This field indicates content may be recognized as sensitive. The Tweet author can select within their own account preferences and choose \u201cMark media you tweet as having material that may be sensitive\u201d so each Tweet created after has this flag set. This may also be judged and labeled by an internal Twitter support agent. (Nullable) lang : When present, indicates a BCP 47 language identifier corresponding to the machine-detected language of the Tweet text, or und if no language could be detected. See more documentation HERE . sentiment : The sentiment of the Tweet, either positive, neutral, or negative. The sentiment is detected by using TextBlob which uses a Naive Bayes Classifier trained on movie reviews. Currently, only english Tweets are supported. In case a Tweet of a different language is analyzed, results will still be returned but might not be accurate.","title":"Literals tweet info"},{"location":"user-guide/overview/literals-user-object/","text":"Detailed Description of the Attributes for the user_info function: id : The integer representation of the unique identifier for this User. id_str : The string representation of the unique identifier for this User. name : The name of the user, as they\u2019ve defined it. screen_name : The screen name, handle, or alias that this user identifies themselves with. followers : IDs, names, and screen names of the user's followers. followees : IDs, names, and screen names of the user's followees. location : The user-defined location for this account\u2019s profile. (Nullable) description : The user-defined UTF-8 string describing their account. (Nullable) url : A URL provided by the user in association with their profile. (Nullable) entities : Entities of the user object. protected : When true, indicates that this user has chosen to protect their Tweets. followers_count : The number of followers this account currently has. friends_count : The number of users this account is following (AKA their \u201cfollowings\u201d or \"followees\"). listed_count : The number of public lists that this user is a member of. created_at : The UTC datetime that the user account was created on Twitter. latest_activity : Latest acitivity according to the users timeline. last_active : Datetime of the latest activity according to the users timeline. liked_tweets : List of IDs of the liked tweets by the user. composed_tweets : List of IDs of the composed tweet by the user. favourites_count : The number of Tweets this user has liked in the account\u2019s lifetime. British spelling used in the field name for historical reasons. verified : When true, indicates that the user has a verified account. statuses_count : The number of Tweets (including retweets) issued by the user. status : Latest tweet object according to the user's timeline. contributors_enabled : Whether contributors are enabled for this account. profile_image_url_https : A HTTPS-based URL pointing to the user\u2019s profile image. profile_banner_url : The HTTPS-based URL pointing to the standard web representation of the user\u2019s uploaded profile banner. default_profile : When true, indicates that the user has not altered the theme or background of their user profile. default_profile_image : When true, indicates that the user has not uploaded their own profile image and a default image is used instead. withheld_in_countries : When present, indicates a list of uppercase two-letter country codes this content is withheld from. bot_scores : Estimation for bot-like behavior from the Botometer API .","title":"Literals user object"}]}